#!/bin/sh

# Get script file directory, including symlinks
SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
# Set up a place for logging
LOG_DIR="$SCRIPT_DIR/.logs"
LOG_FILE="manim_wrapper.log"
LOG_PATH="$LOG_DIR/$LOG_FILE"
mkdir -p "$LOG_DIR"

get_path_folder_part () {
  if [ -d "$1" ]; then
    echo "$1"
  elif [ -f "$1" ]; then
    path_folder_part="${1%/*}"
    echo "$path_folder_part"
  else
    # not actually a path so just print it out again
    echo "$1"
  fi
}

get_path_file_part () {
  if [ -f "$1" ]; then
    path_file_part="${1##*/}"
    echo "$path_file_part"
  else
    # not actually a file so just print it out again
    echo "$1"
  fi
}

# given one string:
#   if it is a valid path:
#     remove all directories from the path (leaving either '<file>'' or '.')
#   print the possibly modified string
trim_possible_path () {
  if [ -d "$1" ]; then
    echo "."
  elif [ -f "$1" ]; then
    echo "$(get_path_file_part $1)"
  else
    echo "$1"
  fi
}

# Helper to log all arguments in the script
log_arguments () {
  arg_idx=0
  for arg_value in "$@"; do
    echo "argument $arg_idx: $arg_value"
    arg_idx=$((arg_idx+1))
  done
}

# Helper to log messages. Essentially $(xargs)
#   $1 (optional): program name to prepend to each log msg. default: "manim_wrapper"
DEFAULT_PROGNAME="manim_wrapper"
# same as above, but also prints to stdout
tee_log_msgs () {
  # determine program name to use
  if [ $# -ge 1 ]; then
    progname="$1"
  else
    progname="$DEFAULT_PROGNAME"
  fi
  # print lines of input
  while IFS="" read -r line || [ -n "$line" ]; do
    if [ -z "$progname" ]; then
      printf "%s\n" "$line" >> "$LOG_PATH"
    else
      printf "%24s: %s\n" "$progname" "$line" >> "$LOG_PATH"
    fi
    echo "$line" # print again w/o progname
  done
}
# same as above, but doesn't print to stdout
log_msgs () {
  </dev/stdin tee_log_msgs "$@" >/dev/null
}

# Run the manim container for one-time use
run_manim_container_throwaway () {
  # docs on the manim docker container:
  # https://docs.manim.community/en/stable/installation/docker.html
  docker_cmd="docker run --rm -v \"$(pwd):/manim\" manimcommunity/manim manim \"$@\" 2>&1"
  printf "about to run:\n$docker_cmd" | log_msgs
  docker run --rm -v "$(pwd):/manim" manimcommunity/manim manim "$@" 2>&1
  docker_success=$?
  if [ $docker_success -ne 0 ]; then
    echo "ERROR, docker container failed to render manim file."
    exit $docker_success
  fi
}

# TODO: Run the manim container for continual use



# START MAIN PROGRAM

# log starting info
echo "invoked manim wrapper script at time $(date "+%D %T")" | log_msgs
echo "original arguments:" | log_msgs
log_arguments "$@" | log_msgs

# transform arguments; follow any paths that show up
# why? when we set up a Volume with docker, we need to link some folder from
# this file system to the docker container. that folder must contain all of the
# files needed by the manim command.
# my current solution is just to cd straight to any file we find, and then
# launch a docker container with current directory as the volume link.
# this will likely break if there are ever 2 paths in the arguments to manim.
# if that ever happens, I have a better solution:
#   1.  pick some directory on this file system to use as a "volume staging area"
#   2.  for each path in manim arguments:
#       a. copy the file / directory to the "volume staging area"
#       b. change the argument name to just './<file/dir name>'
#   3.  link a Volume with this staging area
#   4.  run manim
#   5.  copy results of the command out of this "staging area" into wherever the
#       user wants them
# there's a couple hand-wavey parts of this, but if the problem ever arises,
# that's my plan.
echo "parsing arguments to work with Docker" | log_msgs
new_arguments=()
for argument in "$@"; do
  new_argument="$(trim_possible_path $argument)"
  # if it was a path that got trimmed, cd to the folder
  # hopefully this only happens once ^-^;
  if [ "$argument" != "$new_argument" ]; then
    path_folder_part=$(get_path_folder_part $argument)
    cd "$path_folder_part"
  fi
  new_arguments+=( "$new_argument" )
done
echo "newly parsed arguments:" | log_msgs
log_arguments "${new_arguments[@]}" | log_msgs

# run docker container here
echo "running throwaway container from $(pwd)" | log_msgs
run_manim_container_throwaway "${new_arguments[@]}" | tee_log_msgs "docker manim container"
echo "done!" | log_msgs
printf "\n\n\n" | log_msgs ""
